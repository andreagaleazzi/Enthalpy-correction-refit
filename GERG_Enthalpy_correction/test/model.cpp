#include "main.h"

double model(const input_vector& input, const parameter_vector& params)
{
	double DHr[2] = { 0., 0. };


#if MIXTURE_COMPS == 1
	const double a[5][3] =
	{
		{params(0), params(0), params(0)},
		{params(1), params(1), params(1)},
		{params(2), params(2), params(2)},
		{params(3), params(3), params(3)},
		{params(4), params(4), params(4)}
	};
	const double c[5][3] =
	{
		{params(5), params(5), params(5)},
		{params(6), params(6), params(6)},
		{params(7), params(7), params(7)},
		{params(8), params(8), params(8)},
		{params(9), params(9), params(9)}
	};
#elif MIXTURE_COMPS == 2
#if PHASE == 0
	const double a[5][9] =
	{
		{ 0., 0., 0., params(0), params(0), params(0), params(10), params(10), params(10) },
		{ 0., 0., 0., params(1), params(1), params(1), params(11), params(11), params(11) },
		{ 0., 0., 0., params(2), params(2), params(2), params(12), params(12), params(12) },
		{ 0., 0., 0., params(3), params(3), params(3), params(13), params(13), params(13) },
		{ 0., 0., 0., params(4), params(4), params(4), params(14), params(14), params(14) }
	};
	const double c[5][9] =
	{
		{ 0., 0., 0., params(5), params(5), params(5), params(15), params(15), params(15) },
		{ 0., 0., 0., params(6), params(6), params(6), params(16), params(16), params(16) },
		{ 0., 0., 0., params(7), params(7), params(7), params(17), params(17), params(17) },
		{ 0., 0., 0., params(8), params(8), params(8), params(18), params(18), params(18) },
		{ 0., 0., 0., params(9), params(9), params(9), params(19), params(19), params(19) }
	};
#elif PHASE == 1
	const double a[5][9] =
	{
		{ +1.703440521331973798e+02, -7.186474267171755628e+02, -5.206671854231613139e+01, params(0), params(0), params(0), params(10), params(10), params(10) },
		{ -6.318017110160004677e+02, +2.107224065718693055e+03, +1.132924212617995181e+02, params(1), params(1), params(1), params(11), params(11), params(11) },
		{ +8.461120666261989527e+02, -2.316233553732484324e+03, -1.548598847842363284e+02, params(2), params(2), params(2), params(12), params(12), params(12) },
		{ -4.811587547413210473e+02, +1.137251900271349996e+03, +8.982077975355166188e+01, params(3), params(3), params(3), params(13), params(13), params(13) },
		{ +9.730123682014752262e+01, -2.103194002435872108e+02, -1.924841893040710161e+01, params(4), params(4), params(4), params(14), params(14), params(14) }
	};
	const double c[5][9] =
	{
		{ +5.931197549458080402e+02, +1.643683543334689148e+03, +1.023039067435921652e+02, params(5), params(5), params(5), params(15), params(15), params(15) },
		{ -9.031718380783376006e+02, -2.755345192248678813e+03, -1.479786692329339246e+02, params(6), params(6), params(6), params(16), params(16), params(16) },
		{ +5.064178163837452189e+02, +1.699119802335634859e+03, +1.137617868316174281e+02, params(7), params(7), params(7), params(17), params(17), params(17) },
		{ -1.252029107059390185e+02, -4.567967781676988466e+02, -3.773474157010790009e+01, params(8), params(8), params(8), params(18), params(18), params(18) },
		{ +1.152715865282898022e+01, +4.530066759316437697e+01, +4.459442449946313225e+00, params(9), params(9), params(9), params(19), params(19), params(19) }
	};
#endif
#elif MIXTURE_COMPS == 3
#if PHASE == 0
	const double a[5][15] =
	{
		{ +1.703440521331973798e+02, -7.186474267171755628e+02, -5.206671854231613139e+01, -3.103323453626480841e+02, +6.043124919392782601e+01, +3.406791988387100218e+02, +1.990581173266097892e+02, +5.249907025382743342e+01, -1.076244548421472835e+01, params(0), params(10), params(20), params(30), params(40), params(50) },
		{ -6.318017110160004677e+02, +2.107224065718693055e+03, +1.132924212617995181e+02, +9.073003904982375616e+02, -2.050573579115350640e+02, -4.755187023387419742e+01, -1.957555626913838509e+01, -1.328795068254610179e+01, +9.318311315521377036e-01, params(1), params(11), params(21), params(31), params(41), params(51) },
		{ +8.461120666261989527e+02, -2.316233553732484324e+03, -1.548598847842363284e+02, -1.154955641251076941e+03, +2.819804025889628178e+02, +4.550111021248309839e+01, -1.359673628432657040e+02, +3.121988320719976286e+02, -1.996420707685886953e+02, params(2), params(12), params(22), params(32), params(42), params(52) },
		{ -4.811587547413210473e+02, +1.137251900271349996e+03, +8.982077975355166188e+01, +7.194894680227357640e+02, -1.751683097600605947e+02, -2.037703812785874291e+01, -6.113309751097070688e+01, -1.896039752186011071e+02, -3.104379529337246879e+01, params(3), params(13), params(23), params(33), params(43), params(53) },
		{ +9.730123682014752262e+01, -2.103194002435872108e+02, -1.924841893040710161e+01, -1.635591092550701831e+02, +4.401776152182344504e+01, +3.655155873426282120e+00, -1.293636124863703287e+02, +9.126702913284695740e+01, +7.555832629246710042e+01, params(4), params(14), params(24), params(34), params(44), params(54) }
	};
	const double c[5][15] =
	{
		{ +5.931197549458080402e+02, +1.643683543334689148e+03, +1.023039067435921652e+02, -7.978805762709610008e+02, +2.014211094503205004e+02, +3.491231562088775036e+02, +1.353795147969576362e+02, -4.261760061909373576e+01, -4.795822989395575320e+01, params(5), params(15), params(25), params(35), params(45), params(55) },
		{ -9.031718380783376006e+02, -2.755345192248678813e+03, -1.479786692329339246e+02, +1.272803665113535544e+03, -3.502334069211859742e+02, -6.826330200127645753e+01, -3.861457149788790133e+01, +9.106010908231182199e+00, +1.052458807726167045e+01, params(6), params(16), params(26), params(36), params(46), params(56) },
		{ +5.064178163837452189e+02, +1.699119802335634859e+03, +1.137617868316174281e+02, -7.555187294268293954e+02, +5.793141758556252086e+01, +4.210906634350019573e+01, -6.519994721812227567e+01, +1.371594210323191305e+02, +1.312847294811719792e+02, params(7), params(17), params(27), params(37), params(47), params(57) },
		{ -1.252029107059390185e+02, -4.567967781676988466e+02, -3.773474157010790009e+01, +1.990581173266097892e+02, +5.249907025382743342e+01, -1.076244548421472835e+01, +1.649538341784401609e+02, -2.504169045693781186e+02, -1.348937232630663061e+02, params(8), params(18), params(28), params(38), params(48), params(58) },
		{ +1.152715865282898022e+01, +4.530066759316437697e+01, +4.459442449946313225e+00, -1.957555626913838509e+01, -1.328795068254610179e+01, +9.318311315521377036e-01, -1.215546966446330401e+02, +1.971529251641660494e+02, +9.695639668752370710e+01, params(9), params(19), params(29), params(39), params(49), params(59) }
	};
#elif PHASE == 1
	const double a[5][15] =
	{
		{ +1.703440521331973798e+02, -7.186474267171755628e+02, -5.206671854231613139e+01, -3.103323453626480841e+02, +6.043124919392782601e+01, +3.406791988387100218e+02, +1.990581173266097892e+02, +5.249907025382743342e+01, -1.076244548421472835e+01, params(0), params(10), params(20), params(30), params(40), params(50) },
		{ -6.318017110160004677e+02, +2.107224065718693055e+03, +1.132924212617995181e+02, +9.073003904982375616e+02, -2.050573579115350640e+02, -4.755187023387419742e+01, -1.957555626913838509e+01, -1.328795068254610179e+01, +9.318311315521377036e-01, params(1), params(11), params(21), params(31), params(41), params(51) },
		{ +8.461120666261989527e+02, -2.316233553732484324e+03, -1.548598847842363284e+02, -1.154955641251076941e+03, +2.819804025889628178e+02, +4.550111021248309839e+01, -1.359673628432657040e+02, +3.121988320719976286e+02, -1.996420707685886953e+02, params(2), params(12), params(22), params(32), params(42), params(52) },
		{ -4.811587547413210473e+02, +1.137251900271349996e+03, +8.982077975355166188e+01, +7.194894680227357640e+02, -1.751683097600605947e+02, -2.037703812785874291e+01, -6.113309751097070688e+01, -1.896039752186011071e+02, -3.104379529337246879e+01, params(3), params(13), params(23), params(33), params(43), params(53) },
		{ +9.730123682014752262e+01, -2.103194002435872108e+02, -1.924841893040710161e+01, -1.635591092550701831e+02, +4.401776152182344504e+01, +3.655155873426282120e+00, -1.293636124863703287e+02, +9.126702913284695740e+01, +7.555832629246710042e+01, params(4), params(14), params(24), params(34), params(44), params(54) }
	};
	const double c[5][15] =
	{
		{ +5.931197549458080402e+02, +1.643683543334689148e+03, +1.023039067435921652e+02, -7.978805762709610008e+02, +2.014211094503205004e+02, +3.491231562088775036e+02, +1.353795147969576362e+02, -4.261760061909373576e+01, -4.795822989395575320e+01, params(5), params(15), params(25), params(35), params(45), params(55) },
		{ -9.031718380783376006e+02, -2.755345192248678813e+03, -1.479786692329339246e+02, +1.272803665113535544e+03, -3.502334069211859742e+02, -6.826330200127645753e+01, -3.861457149788790133e+01, +9.106010908231182199e+00, +1.052458807726167045e+01, params(6), params(16), params(26), params(36), params(46), params(56) },
		{ +5.064178163837452189e+02, +1.699119802335634859e+03, +1.137617868316174281e+02, -7.555187294268293954e+02, +5.793141758556252086e+01, +4.210906634350019573e+01, -6.519994721812227567e+01, +1.371594210323191305e+02, +1.312847294811719792e+02, params(7), params(17), params(27), params(37), params(47), params(57) },
		{ -1.252029107059390185e+02, -4.567967781676988466e+02, -3.773474157010790009e+01, +1.990581173266097892e+02, +5.249907025382743342e+01, -1.076244548421472835e+01, +1.649538341784401609e+02, -2.504169045693781186e+02, -1.348937232630663061e+02, params(8), params(18), params(28), params(38), params(48), params(58) },
		{ +1.152715865282898022e+01, +4.530066759316437697e+01, +4.459442449946313225e+00, -1.957555626913838509e+01, -1.328795068254610179e+01, +9.318311315521377036e-01, -1.215546966446330401e+02, +1.971529251641660494e+02, +9.695639668752370710e+01, params(9), params(19), params(29), params(39), params(49), params(59) }
	};



#endif
#endif


	//std::cout << input << std::endl;
#if 1
	const double temp[2] = { input(ed::T1), input(ed::T2) };
	const double pres[2] = { input(ed::P1), input(ed::P2) };
	const double dens[2] = { input(ed::d1_rival), input(ed::d2_rival) };
	const double comp[3] = { input(ed::zN2), input(ed::zAr), input(ed::zO2) };
	const double DH = input(ed::DH_rival);


	const double temp_c_mix =
		+temp_c[0] * comp[0]
		+ temp_c[1] * comp[1]
		+ temp_c[2] * comp[2];

	const double dens_c_mix =
		+dens_c[0] * comp[0]
		+ dens_c[1] * comp[1]
		+ dens_c[2] * comp[2];

	double tau_print[2] = { 0., 0. };
	double delta_print[2] = { 0., 0. };

	for (int k = 0; k < 2; k++)
	{

		const double tau = temp_c_mix / temp[k];
		tau_print[k] = tau;

		const double delta = dens[k] / dens_c_mix;
		delta_print[k] = delta;

		const double tau2 = tau * tau;
		const double tau3 = tau * tau2;
		const double tau4 = tau * tau3;
		const double tau5 = tau * tau4;

		const double delta2 = delta * delta;
		const double delta3 = delta * delta2;
		const double delta4 = delta * delta3;
		const double delta5 = delta * delta4;

		{ // MONO CORRECTION
			for (int i = 0; i < 3; i++)
			{
				DHr[k] += (comp[i])
					*
					(a[0][i]
						+ tau * a[1][i]
						+ tau2 * a[2][i]
						+ tau3 * a[3][i]
						+ tau4 * a[4][i]
						)
					*
					(c[0][i]
						+ delta * c[1][i]
						+ delta2 * c[2][i]
						+ delta3 * c[3][i]
						+ delta4 * c[4][i]
						);
			}
		}

#if MIXTURE_COMPS > 1
		{ // BINARY CORRECTION
			int i_[6] = { 0, 0, 1, 1, 2, 2 };
			int j_[6] = { 1, 2, 2, 0, 0, 1 };

			for (int n = 0; n < 6; n++)
			{
				DHr[k] += (comp[i_[n]] * comp[i_[n]] * comp[j_[n]])
					*
					(a[0][n + 3]
						+ tau * a[1][n + 3]
						+ tau2 * a[2][n + 3]
						+ tau3 * a[3][n + 3]
						+ tau4 * a[4][n + 3]
						)
					*
					(c[0][n + 3]
						+ delta * c[1][n + 3]
						+ delta2 * c[2][n + 3]
						+ delta3 * c[3][n + 3]
						+ delta4 * c[4][n + 3]
						);
			}
		}
#endif

#if MIXTURE_COMPS > 2
		{ // TERNARY CORRECTION
			int i_[6] = { 0, 0, 1, 1, 2, 2 };
			int j_[6] = { 1, 2, 0, 2, 0, 1 };
			int k_[6] = { 2, 1, 2, 0, 1, 0 };

			for (int n = 0; n < 6; n++)
			{
				DHr[k] += (comp[i_[n]] * comp[i_[n]] * comp[i_[n]] * comp[j_[n]] * comp[j_[n]] * comp[k_[n]])
					*
					(a[0][n + 3 + 6]
						+ tau * a[1][n + 3 + 6]
						+ tau2 * a[2][n + 3 + 6]
						+ tau3 * a[3][n + 3 + 6]
						+ tau4 * a[4][n + 3 + 6]
						)
					*
					(c[0][n + 3 + 6]
						+ delta * c[1][n + 3 + 6]
						+ delta2 * c[2][n + 3 + 6]
						+ delta3 * c[3][n + 3 + 6]
						+ delta4 * c[4][n + 3 + 6]
						);
			}
		}
#endif
	}

#if 0
	std::cout <<
		"tau1" << "\t" <<
		"tau2" << "\t" <<
		"delta1" << "\t" <<
		"delta2" << "\t" <<
		"DHr1" << "\t" <<
		"DHr2" <<
		std::endl;

	std::cout <<
		tau_print[0] << "\t" <<
		tau_print[1] << "\t" <<
		delta_print[0] << "\t" <<
		delta_print[1] << "\t" <<
		DHr[0] << "\t" <<
		DHr[1] <<
		std::endl;
#endif
#if 0
	static long int iter_count = 0;
	if (iter_count % (dataset.size() * 48) == 0)
	{
		printf("\n--------------------------------------\n");
		printf("ITER: %d\n", iter_count);
		for (int k = 0; k < 2; k++)
		{
			for (int i = 0; i < 4; i++)
			{
				for (int j = 0; j < MIXTURE_MOLTIPLICATOR; j++)
				{
					double var = 0;
					if (k == 0)
						var = a[i][j + 3 + 6];
					else
						var = c[i][j + 3 + 6];


					if (var > 0)
						printf("+%.18e\t", var);
					else
						printf("%.18e\t", var);
				}
				printf("\n");
			}
		}
		printf("--------------------------------------\n");
	}
	iter_count++;
#endif

	return DH + DHr[1] - DHr[0];
#else
	return 0;
#endif
}
